==============================================================================
                                                                       *adopure*

The plugin provides an opinionated worfklow to interact with Azure DevOps Pull Requests.

==============================================================================
Table of Contents                                             *adopure.contents*

 ····································································· |adopure|
 ························································· |adopure.config.meta|

M.ado_pure({opts})                                                  *M.ado_pure*
    Main nvim command line entry point of the plugin.
    Intended to be called using the command: AdoPure.
    The command is autocompleting when used in neovim command line. Valid options include:

    :AdoPure [ load ] [ context | threads ] [ opts ]
         Loads specified into state.

             *context*: load open pull requests; prompt user to pick one.
             Note: Subsequent commands will operate on the chosen PR.

             *threads*: Fetch comment threads from Azure DevOps.


    :AdoPure [ open ] [ quickfix | thread_picker | new_thread | existing_thread ] [ opts ]
         Opens specified in the editor.

             *quickfix*: Open comment threads in quickfix window.

             *thread_picker*: Open a picker with all comment threads.
             Supports filtering like so:
                 :AdoPure open thread_picker {thread_filters={'hide_system', 'hide_closed'}}

             *new_thread*: Opens a window to write a comment on code selection.

             *existing_thread*: Opens a window with an existing comment thread.


    :AdoPure [ submit ] [ comment | vote | thread_status ] [ opts ]
         Submits specified to Azure DevOps.

             *comment*: Submit new comment or reply; must be in new_thread or existing_thread window.

             *vote*: Submit a new vote on the pull request.

             *thread_status*: Submit a thread_status change; must be in existing_thread window.

    Note: If no arguments args provided, the user will be prompted.

    Parameters: ~
        {opts}  (table)  provided by neovim user command context.

    Usage: ~
>lua
        vim.cmd(':AdoPure load context {}')
<


M.load_state_manager()                                    *M.load_state_manager*
    Initialize state_manager, contains repository and all open pull requests.
    If not using the vim command line interface, call this first.

    Returns: ~
        (adopure.StateManager)


M.get_loaded_state()                                        *M.get_loaded_state*
    Return state of the plugin; raises if no pull request has been loaded into context.
    If not using the vim command line interface, call this to get state required for the other commands.

    Returns: ~
        (adopure.AdoState)


==============================================================================
                                                           *adopure.config.meta*

The plugin is configured by assigning an adopure.Config to vim.g.adopure.
>lua
 vim.g.adopure = {}
<

adopure.Highlights                                          *adopure.Highlights*


    Fields: ~
        {active?}         (string)  Highlight for lines with active comments.
        {active_sign?}    (string)  Highlight for sign indicating active comments.
        {inactive?}       (string)  Highlight for lines with inactive comments.
        {inactive_sign?}  (string)  Highlight for sign indicating in active comments.


adopure.Config                                                  *adopure.Config*

    Fields: ~
        {pat_token?}          (string)              Personal Access Token to acess Azure DevOps.
                                                    If not provided, attempt to use AZURE_DEVOPS_EXT_PAT environment variable.
                                                    If no environment variable is set, and no config is provided, the plugin will not work.
                                                    The plugin offers no mechanism to securely load secrets.
                                                    If you have a cli command that will produce the secret, consider doing something like this:
                                                    >lua
                                                     local nio = require("nio")
                                                     nio.run(function()
                                                         local secret_job = nio.process.run({ cmd = "pass", args = { "show", secret_name} })
                                                         vim.g.adopure = { pat_token = secret_job.stdout.read():sub(1, -2) }
                                                     end)
                                                    <
                                                    Alternatively, you can set it as environment variable.


        {hl_groups?}          (adopure.Highlights)  Highlight groups to apply.
        {preferred_remotes?}  (string[])            List with preferred remotes to extract Azure DevOps context from.
                                                    Remotes are elected among the following options:
                                                    1. Any remote in this list can be picked, non-deterministically.
                                                    2. Any Azure DevOps remote.
                                                    3. Any remote. If it's not an Azure DevOps remote, the plugin will not work.


vim:tw=78:ts=8:noet:ft=help:norl:
